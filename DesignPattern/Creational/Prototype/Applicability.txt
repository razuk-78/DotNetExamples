 Applicability
 Use the Prototype pattern when your code shouldn’t depend on the 
    concrete classes of objects that you need to copy.

 This happens a lot when your code works with objects passed to you 
     from 3rd-party code via some interface. The concrete classes of these objects are unknown, 
     and you couldn’t depend on them even if you wanted to.

The Prototype pattern provides the client code with a general interface for 
    working with all objects that support cloning. 
    This interface makes the client code independent from the
    concrete classes of objects that it clones.

 Use the pattern when you want to reduce the number of subclasses that only
       differ in the way they initialize their respective objects. 
       Somebody could have created these subclasses to be able to 
       create objects with a specific configuration.

 The Prototype pattern lets you use a set of pre-built objects,
     configured in various ways, as prototypes.

Instead of instantiating a subclass that matches some configuration, 
    the client can simply look for an appropriate prototype and clone it.